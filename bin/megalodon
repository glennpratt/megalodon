#!/usr/bin/env ruby

begin
  require "rubygems"
  require 'chef'
  require 'highline/import'
  require 'optparse'
  require 'fileutils'

  opt_parser = OptionParser.new do |opt|
    opt.banner = "Usage: megalodon {-h} [install|update_vhosts]"
    opt.on("-h","--help","help") do
      puts opt_parser
      exit
    end
  end

  # Parse the command line.
  opt_parser.parse!

  case ARGV[0]
    when 'update_vhosts'
      runlist = 'run_vhosts.json'
    when 'install', nil
      runlist = 'run_list.json'
    else
      puts opt_parser
      exit
  end

  # Create the databag directory here since it appears that the chef-solo run
  # will fail if it doesn't already exist. Wish there was a better way to do thisâ€¦
  directory_name = "#{ENV['HOME']}/.megalodon/data_bags/vhosts"
  FileUtils.mkdir_p(directory_name) unless FileTest::directory?(directory_name)

  cwd = File.dirname(__FILE__) + '/..'
  gem_path = `gem env| grep "EXECUTABLE DIRECTORY"| awk -F': ' '{print $2}'`.strip
  unless File.exists?("#{gem_path}/chef-solo")
    raise "Cannot find chef-solo at #{gem_path}/chef-solo}"
  end

  puts "Copying custom forumulas"
  system("cp #{cwd}/formulas/* /usr/local/Library/Formula/")
  puts "Starting chef-solo run"
  system("#{gem_path}/chef-solo -j #{cwd}/config/#{runlist} -c #{cwd}/config/solo.rb")

rescue LoadError => e
  puts e.message
  puts "You don't seem to have chef, installing it for you"
  sudo = File.writable?(%x[gem environment| grep "INSTALLATION DIRECTORY"| awk -F':' '{print $2}'].strip) ? "" : "sudo "
  system("#{sudo} gem install chef --no-rdoc --no-ri")
  puts "I had to install chef for you, please rerun 'megalodon install'"
end
