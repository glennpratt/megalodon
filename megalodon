#!/usr/bin/env ruby

begin
  require "rubygems"
  require 'chef'
  require 'highline/import'
  require 'optparse'
  require 'fileutils'

  opt_parser = OptionParser.new do |opt|
    opt.banner = "Usage: megalodon {-h} [install|update_vhosts]"
    opt.on("-h","--help","help") do
      puts opt_parser
      exit
    end
  end

  # Parse the command line.
  opt_parser.parse!

  case ARGV[0]
    when 'update_vhosts'
      runlist = 'run_vhosts.json'
    when 'install', nil
      runlist = 'run_list.json'
    else
      puts opt_parser
      exit
  end

  cwd = Dir.pwd

  # Create the databag directory here since it appears that the chef-solo run
  # will fail if it doesn't already exist. Wish there was a better way to do thisâ€¦
  directory_name = "#{ENV['HOME']}/.megalodon/data_bags/vhosts"
  FileUtils.mkdir_p(directory_name) unless FileTest::directory?(directory_name)

  # Copy "mega" roles to the users .megalodon directory because chef-solo
  # only supports one roles directory.
  roles_path = "#{ENV['HOME']}/.megalodon/roles"
  FileUtils.mkdir_p(roles_path) unless FileTest::directory?(roles_path)

  # Clear roles first.
  Dir.glob("#{ENV['HOME']}/.megalodon/roles/mega_*.json") do |role_link|
    FileUtils.rm(role_link)
  end

  # Symlink roles into place.
  Dir.glob("#{cwd}/roles/mega_*.json") do |source|
    target = "#{ENV['HOME']}/.megalodon/roles/#{File.basename(source)}"
    FileUtils.ln_s(source, target) unless FileTest.exist?(target)
  end

  default_run_list = "#{cwd}/config/run_list.json"
  user_node_data = "#{ENV['HOME']}/.megalodon/node.json"
  FileUtils.cp(default_run_list, user_node_data)

  mega_vhosts_data = "#{cwd}/config/run_vhosts.json"
  node_attrib = (runlist == 'run_list.json') ? user_node_data : mega_vhosts_data

  solo_path = `which chef-solo`.strip
  unless File.exists?(solo_path)
    raise "Cannot find chef-solo at #{solo_path}}"
  end

  puts "Copying custom forumulas"
  system("cp #{cwd}/formulas/* /usr/local/Library/Formula/")
  puts "Starting chef-solo run"
  system("#{solo_path} -j #{node_attrib} -c #{cwd}/config/solo.rb")

rescue LoadError => e
  puts e.message
  puts "You don't seem to have chef, installing it for you"
  sudo = File.writable?(%x[gem environment| grep "INSTALLATION DIRECTORY"| awk -F':' '{print $2}'].strip) ? "" : "sudo "
  system("#{sudo} gem install chef --no-rdoc --no-ri")
  puts "I had to install chef for you, please rerun 'megalodon install'"
end
